//Pratham Kwatra
//Lab 7 

1.1

//returns the mean of array size N in double
double arithmeticMean(double arrAvg[], const size_t N)
{
	//initializing sum and mean
	double sum, mean;
	for (size_t lenArr = 0; lenArr < N; ++lenArr)
		sum += arrAvg[lenArr];

	//TypeCasting in case all the values in sum are int. 
	mean = sum / (double) N;
	return mean;
}

1.2
//Converts an integer less than or equal to length 10, into a string of characters
void int2string( int n, char answer[] )
{
	//Initalization of counters
	int len=0, i=n;
	char c;
	//counts the digits in the integers
	while (! (i == 0))
	{
		len++;
		i /= 10;
	}
	//loop to put the char version of the given int  
	for (i = len-1; i >= 0; i--)
	{
		//converting a single digit into char
		c = (char) (n%10) + '0';
		answer[i] = c;
		n /= 10;
	}
}


2.1
//Binary Search algorithm for finding a target in a given array of integers
int binSearch(int* integers, const size_t n, int target)
{	
	//Initializing Parameters
	int start, end, mid;

	start = 0;
	end = n -1;

	//Loop to check the array for target
	while (start <= end)
	{
		mid = (start + end) / 2;
		if (*(integers + mid) > target)
			end = mid - 1;
		else
			if ( *(integers + mid) < target )
				start = mid + 1;
		else
			//returns the position of element when target found
			return mid;
	}
	return n;
}

2.2

//function calculates statistics for a double type array. It expects 5 arguments.
void arrStats(double* doubArray, const size_t N, double *mean, double *max, double *min)
{
	//initializing variables sum and setting max and min to doubArray[0].
	double sum;
	*max = *doubArray; *min = *doubArray;

	//for loop to iterate over the array and calculating max and min. 
	for (size_t i=0; i<N; i++)
		{
			sum += *(doubArray+i);
			if ( *max < *(doubArray+i) )
				*max = *(doubArray+i);
			if ( *min > *(doubArray+i) )
				*min = *(doubArray+i);
		}
	//calculating mean
	*mean = sum / (double) N;
}

2.3
//integer target finder for an integer array 
int *arrFind(int* intArr, const size_t n, int target)
{
	//Initializing
	int start, end;

	start = 0;
	end = n -1;

	//Looping over the array 
	while (start <= end)
	{
		//check statements
		if (! (*(intArr + start) == target))
			start++;
		else
			return intArr +start;
	}
	//return NULL if target not found
	return NULL;
}


3.1
//Takes a string and converts ALL lowercase chars into uppercase
//needs the .h file : ctype.h
void capitalise(char* str)
{
	//Initial 
	char newString;
	int cnt=0;
	//loop to parse over the given string(or characters)
	while ( *(str+cnt) != '\0')
	{  
		//Check Statement which only applies if the char is an alphabet and is a lower
		if ( isalpha( *(str +cnt)) && islower(  *(str+cnt) )) 
		{
			newString = toupper(  *(str+cnt) );
			//Swtiches the lower with upper 
			*(str+cnt) = newString;
		}
		//keeps a count
		cnt++;
	}
																   
}

3.2
Circle.c
